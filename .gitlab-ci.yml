stages:
  - init
  - test
  - build
  - release

init:
  image: golang:1.10-alpine
  stage: init
  cache:
    paths:
    - bin/
    - pkg/
    - src/
  script:
    - mkdir -p bin
    - export GOPATH=$(pwd)
    - export GOBIN=$GOPATH/bin
    - apk update && apk add git
    - go get -t ./...
  artifacts:
    expire_in: 10 minutes
    paths:
      - bin/
      - pkg/
      - src/


test:
  image: golang:1.10-alpine
  stage: test
  dependencies:
    - init
  coverage: '/coverage: \d+\.\d+\%/'
  script:
    - export GOPATH=$(pwd)
    - go test -cover


build-linux:
  image: golang:1.10-alpine
  stage: build
  tags:
    - linux
  dependencies:
    - init
  script:
    - export GOPATH=$(pwd)
    - go build .
  artifacts:
    expire_in: 1 week
    paths:
      - depcharge

build-mac:
  stage: build
  tags:
    - mac-x64
  dependencies:
    - init
  script:
    - export GOPATH=$(pwd)
    - go build .
  artifacts:
    expire_in: 1 week
    paths:
      - depcharge

build-docker:
  image: docker:latest
  stage: build
  services:
  - docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:latest .

    # Ensure the container can run properly
    - docker run $CI_REGISTRY_IMAGE:latest

    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - master

release:
  image: registry.gitlab.com/centerorbit/release-github
  stage: release
  dependencies:
    - build
  variables:
    GIT_STRATEGY: none
    OWNER: "centerorbit"
    REPO: "depcharge"
    TAG: $CI_COMMIT_SHA
    RELEASE_NAME: "linux-x64"
    ACCESS_TOKEN: $GITHUB_ACCESS_TOKEN
    PRE_RELEASE: "true"
  script:
    - zip -m $RELEASE_NAME.zip depcharge
    - export TAG=$(echo $TAG| cut -c1-7)
    - php /var/code/release.php
  only:
    - master