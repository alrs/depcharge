stages:
  - init
  - test
  - build
  - release

init:
  image: golang:1.10-alpine
  stage: init
  cache:
    paths:
    - bin/
    - pkg/
    - src/
  script:
    - mkdir -p bin
    - export GOPATH=$(pwd)
    - export GOBIN=$GOPATH/bin
    - apk update && apk add git
    - go get -t ./...
  artifacts:
    expire_in: 10 minutes
    paths:
      - bin/
      - pkg/
      - src/


test:
  image: golang:1.10-alpine
  stage: test
  dependencies:
    - init
  coverage: '/coverage: \d+\.\d+\%/'
  script:
    - export GOPATH=$(pwd)
    - go test -cover


build-linux:
  image: golang:1.10-alpine
  stage: build
  tags:
    - linux
  dependencies:
    - init
  script:
    - export GOPATH=$(pwd)
    - go build .
    - mv depcharge depcharge-linux
  artifacts:
    expire_in: 1 week
    paths:
      - depcharge-linux

build-mac:
  stage: build
  tags:
    - mac-x64
  dependencies:
    - init
  script:
    - export GOPATH=$(pwd)
    - go build .
    - mv depcharge depcharge-mac
  artifacts:
    expire_in: 1 week
    paths:
      - depcharge-mac
  only:
    - tags
    - master

build-win:
  stage: build
  tags:
    - win-x64
  dependencies:
    - init
  script:
    - set GOPATH=%cd%
    - go build .
  artifacts:
    expire_in: 1 week
    paths:
      - depcharge.exe
  only:
    - tags
    - master

build-docker:
  image: docker:latest
  stage: build
  services:
  - docker:dind
  script:
    - export IMAGE_NAME=$(if [ -z $CI_COMMIT_TAG ]; then echo "latest" ; else echo $CI_COMMIT_TAG; fi)
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$IMAGE_NAME .

    # Ensure the container can run properly
    - docker run $CI_REGISTRY_IMAGE:$IMAGE_NAME

    - docker push $CI_REGISTRY_IMAGE:$IMAGE_NAME
  only:
    - tags
    - master

release:
  image: registry.gitlab.com/centerorbit/release-github
  stage: release
  dependencies:
    - build-linux
    - build-mac
    - build-win
  variables:
    GIT_STRATEGY: none
    OWNER: "centerorbit"
    REPO: "depcharge"
    TAG: $CI_COMMIT_SHA
    ACCESS_TOKEN: $GITHUB_ACCESS_TOKEN
  script:
    # Going to assume we don't need to push tags, but we'll have to see how fast they
    #  propogate with the other syncing mechanism.
    # - git push --tags git@github.com:centerorbit/depcharge.git 

    # If it's a tag, then it's not a prerelease
    - if [ -z $CI_COMMIT_TAG ]; then export PRE_RELEASE="true" ; else unset PRE_RELEASE ; fi

    # Lets make the initial release on GitHub
    - export TAG=$(if [ -z $CI_COMMIT_TAG ]; then echo $TAG| cut -c1-7 ; else echo $CI_COMMIT_TAG; fi)
    - export UPLOAD_URL=$(php /var/code/createRelease.php)

    # Send Linux binary to GitHub 
    - export RELEASE_NAME="linux-x64"
    - mv depcharge-linux depcharge
    - zip -m $RELEASE_NAME.zip depcharge
    - php /var/code/uploadBinary.php

    # Send Mac binary to GitHub 
    - export RELEASE_NAME="mac-x64"
    - mv depcharge-mac depcharge
    - zip -m $RELEASE_NAME.zip depcharge
    - php /var/code/uploadBinary.php

    # Send Win binary to GitHub 
    - export RELEASE_NAME="win-x64"
    - zip -m $RELEASE_NAME.zip depcharge.exe
    - php /var/code/uploadBinary.php
  only:
    - tags
    - master